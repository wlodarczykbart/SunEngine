#include "LightBuffer.hlsl"
#include "CameraBuffer.hlsl"

Texture2D DiffuseMap;
Texture2D MetallicMap;
Texture2D RoughnessMap;
Texture2D AOMap;
Texture2D NormalMap;
SamplerState Sampler;

static float PI = 3.14159265359;

cbuffer MaterialBuffer
{
	float4 Diffuse;
	float MetallicFactor;
	float RoughnessFactor;
	float AOFactor;
};

struct PS_In
{
	float4 clipPos : SV_POSITION;
	float4 position : POSITION;
	float4 texCoord : TEXCOORD;
	float4 normal : NORMAL;
	float4 tangent : TANGENT;
};

float3 fresnelSchlick(float cosTheta, float3 F0)
{
    return F0 + (1.0 - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}  

float DistributionGGX(float3 N, float3 H, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}
float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}

float4 main(PS_In pIn) : SV_TARGET
{	
	float2 texCoord = pIn.texCoord.xy;

	float3 albedo = pow((DiffuseMap.Sample(Sampler, texCoord) * Diffuse).rgb, float3(2.2, 2.2, 2.2));
	float Metallic = MetallicMap.Sample(Sampler, texCoord).r * MetallicFactor;
	float Roughness = RoughnessMap.Sample(Sampler, texCoord).r * RoughnessFactor;
	float AO = AOMap.Sample(Sampler, texCoord).r * AOFactor;
		
	float3 N = normalize(pIn.normal.xyz);
	float3 T = normalize(pIn.tangent.xyz);	
	float3x3 tbn;
	tbn[0] = T;
	tbn[1] = -cross(N, T);
	tbn[2] = N;
	N = NormalMap.Sample(Sampler, texCoord).xyz * 2.0 - 1.0;
	N = normalize(mul(N, tbn));	
	
	float3 V = normalize((InvViewMatrix[3] - pIn.position).xyz);
	
	//radiance = float3(1,1,1) * 150.0;

	float3 F0 = float3(0.04, 0.04, 0.04);
	F0 = lerp(F0, albedo, Metallic);
	
	float3 Lo = float3(0, 0, 0);

	float3 L = normalize(-SunDirection.xyz);
	float3 H = normalize(V + L);			
	float3 radiance  = float3(150, 150, 150); 
	radiance *= 0.01;
	//radiance = float3(1,1,1);
	
	float NDF = DistributionGGX(N, H, Roughness);       
	float G   = GeometrySmith(N, V, L, Roughness); 	
	float3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

	float3 kS = F;
	float3 kD = float3(1.0, 1.0, 1.0) - kS;
	kD *= 1.0 - Metallic;
	
	float3 numerator    = NDF * G * F;
	float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
	float3 specular     = numerator / max(denominator, 0.001);  	  		
  
    float NdotL = max(dot(N, L), 0.0);        
    Lo += (kD * albedo / PI + specular) * radiance * NdotL;	
	
	float3 ambient = float3(0.03, 0.03, 0.03) * albedo * AO;
	float3 color   = ambient + Lo;  	
	
	color = color / (color + float3(1.0, 1.0, 1.0));
	color = pow(color, float3(1,1,1) * (1.0/2.2));	
	
	return float4(lerp(color, float3(1,1,1) * albedo, 1.0-pIn.position.w), 1.0);
}