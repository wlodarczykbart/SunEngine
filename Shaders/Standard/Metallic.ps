#include "CameraBuffer.hlsl"
#include "PixelShader.hlsl"

Texture2D DiffuseMap;
Texture2D MetallicMap;
Texture2D RoughnessMap;
Texture2D NormalMap;
Texture2D AmbientOcclusionMap;
Texture2D AlphaMap;
SamplerState Sampler;

cbuffer MaterialBuffer
{
	float4 DiffuseColor;
	float Metallic;
	float Smoothness;
};

struct PS_In
{
	float4 clipPos : SV_POSITION;
#if !defined(DEPTH) || (defined(DEPTH) && defined(ALPHA_TEST))	
	float4 texCoord : TEXCOORD;	
#endif
#ifndef DEPTH	
	float4 position : POSITION;
	float4 normal : NORMAL;
	float4 tangent : TANGENT;
#endif	
#ifdef ALPHA_TEST
	float4 objectCoord : OBJCOORD;
#endif	
};

#ifndef DEPTH
PS_Out main(PS_In pIn)
{	
	PS_Out pOut;
	
	float2 texCoord = pIn.texCoord.xy;

	float4 diffuse = DiffuseMap.Sample(Sampler, texCoord) * DiffuseColor;
	diffuse.a *= AlphaMap.Sample(Sampler, texCoord).r;
#ifdef ALPHA_TEST
	//diffuse.a *= 2.0;
	float threshold = CalcAlphaThreshold(pIn.objectCoord.xyz);	
	//float threshold = 0.5;
	clip(diffuse.a - threshold);
#endif

	float3 albedo = diffuse.rgb;
	float metallic = saturate(MetallicMap.Sample(Sampler, texCoord).r * Metallic);
	float smoothness = (1.0 - RoughnessMap.Sample(Sampler, texCoord).r) * Smoothness;
	float3 f0 = lerp(float3(0.04, 0.04, 0.04), albedo, metallic);
	albedo *= (1.0 - metallic);
	float ao = AmbientOcclusionMap.Sample(Sampler, texCoord).r;
	
//HACK: to get the AlphaMap to not be optimized from the shader... Solution could be to pack one channel textures into one texture
#ifdef GBUFFER
	ao = lerp(ao, diffuse.a, pIn.normal.w);
#endif	
		
	float3x3 tbn;
	tbn[0] = normalize(pIn.tangent.xyz);
	tbn[2] = normalize(pIn.normal.xyz);
	tbn[1] = -cross(tbn[2], tbn[0]);
	
	float3 n = mul(NormalMap.Sample(Sampler, texCoord).xyz * 2.0 - 1.0, tbn);
		
	ShadePixel(albedo, ao, f0, smoothness, n, pIn.position.xyz, GetScreenTexCoord(pIn.clipPos.xy), pOut);
#ifndef GBUFFER
	pOut.color.a = diffuse.a;
#endif
	return pOut;
}

#else

void main(PS_In pIn)
{
#ifdef ALPHA_TEST
	float2 texCoord = pIn.texCoord.xy;
	float4 diffuse = DiffuseMap.Sample(Sampler, texCoord) * DiffuseColor;
	diffuse.a *= AlphaMap.Sample(Sampler, texCoord).r;
	float threshold = 0.5;
	clip(diffuse.a - threshold);	
#endif
};

#endif