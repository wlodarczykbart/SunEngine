#include "CameraBuffer.hlsl"
#include "PixelShader.hlsl"

Texture2D DiffuseMap;
Texture2D SpecularMap;
Texture2D NormalMap;
Texture2D AOMap;
SamplerState Sampler;

cbuffer MaterialBuffer
{
	float4 Diffuse;
	float3 Specular;
	float Smoothness;
};

struct PS_In
{
	float4 clipPos : SV_POSITION;
#if !defined(DEPTH) || (defined(DEPTH) && defined(ALPHA_TEST))	
	float4 texCoord : TEXCOORD;	
#endif
#ifndef DEPTH	
	float4 position : POSITION;
	float4 normal : NORMAL;
	float4 tangent : TANGENT;
#endif	
};
PS_Out main(PS_In pIn)
{	
	PS_Out pOut;
	
#if defined(DEPTH) && !defined(ALPHA_TEST)	
	pOut.color = float4(0,0,0,1);
	return pOut;
#else	
	float2 texCoord = pIn.texCoord.xy;

	float4 diffuse = DiffuseMap.Sample(Sampler, texCoord) * Diffuse;
#ifdef ALPHA_TEST
	if(diffuse.a < 0.5)
		discard;
#endif

#if defined(DEPTH) && defined(ALPHA_TEST)	
	pOut.color = float4(0,0,0,1);
	return pOut;
#endif

#ifndef DEPTH
	float3 albedo = diffuse.rgb;
	float3 f0 = Specular * SpecularMap.Sample(Sampler, texCoord).r;
	float smoothness = Smoothness;
	float ao = AOMap.Sample(Sampler, texCoord).r;
		
	float3x3 tbn;
	tbn[0] = normalize(pIn.tangent.xyz);
	tbn[2] = normalize(pIn.normal.xyz);
	tbn[1] = -cross(tbn[2], tbn[0]);
	
	float3 n = mul(NormalMap.Sample(Sampler, texCoord).xyz * 2.0 - 1.0, tbn);
		
	ShadePixel(albedo, ao, f0, smoothness, n, pIn.position.xyz, pOut);		
	return pOut;
#endif
#endif
}