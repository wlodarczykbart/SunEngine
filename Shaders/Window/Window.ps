Texture2D RainTexture;
SamplerState RainSampler;

#include "SunlightBuffer.hlsl"
#include "EnvBuffer.hlsl"
#include "SceneTexture.hlsl"
#include "FogBuffer.hlsl"

struct PS_In
{
	float4 clipPos : SV_POSITION;	
	float4 projCoord : PROJCOORD;
	float4 position : POSITION;
	float4 normal : NORMAL;
	float2 texCoord : TEXCOORD;
};

cbuffer MaterialBuffer
{
	float4 DiffuseColor;
	float4 SpecularColor;
	float4 AtlasCoords;
	float4 ObjectCenter;
};

float4 main(PS_In pIn) : SV_TARGET
{
	float4 outColor = float4(0,0,0,1);

	float4 proj = pIn.projCoord / pIn.projCoord.w;
	proj = proj * 0.5 + 0.5;
	proj.y = 1.0 - proj.y;	
	float2 projCoord = proj.xy;	

#ifdef SHADER_PASS_DEFAULT	
	float2 atlasCoord;
	atlasCoord.x = lerp(AtlasCoords.x, AtlasCoords.z, projCoord.x);
	atlasCoord.y = lerp(AtlasCoords.y, AtlasCoords.w, projCoord.y);
	float4 dropColor = RainTexture.Sample(RainSampler, atlasCoord);
	
	float dropRefraction = dropColor.r;
	float dropTransparency = dropColor.r;
	
	dropRefraction *= 0.010;	
	projCoord += dropRefraction;
	projCoord.x = clamp(projCoord.x, 0.0, 1.0);
	projCoord.y = clamp(projCoord.y, 0.0, 1.0);
	
	float4 albedo = SampleScene(projCoord);	
	albedo.rgb = lerp(albedo.rgb, float3(1,1,1) * 0.75, dropTransparency * 0.1);	
	//albedo.rgb = lerp(albedo.rgb, DiffuseColor.rgb, DiffuseColor.a);
	albedo.a = 1.0;
	
	float3 viewVector = (InvViewMatrix[3] - pIn.position).xyz;	
	float distanceToCamera = length(viewVector);
	viewVector /= distanceToCamera;
	float3 normal = normalize(pIn.normal.xyz);	
	
	float3 litColor = ComputeSunlightContribution(viewVector, normal, DiffuseColor.rgb, SpecularColor);
	litColor = ComputeFogContribution(litColor, distanceToCamera);
	
	albedo.rgb = lerp(albedo.rgb, litColor, DiffuseColor.a);
	outColor = albedo;
#endif
	
#ifdef SHADER_PASS_STATIC
	
	float tiling = 4.0;
	float rainSpeed = 0.1;
	
	float2 texCoord = pIn.texCoord;
	outColor = float4(texCoord.x, texCoord.y, 0.0, 1.0);
	
	float2 vTime = float2(0.0f, ELAPSED_TIME) * rainSpeed;
	float scrollOffset= RainTexture.Sample(RainSampler, texCoord + vTime).g;
	//scrollOffset = pow(scrollOffset, 4.0);	
	
	float dropRefraction = 1.0 - RainTexture.Sample(RainSampler, texCoord * tiling).r;
	dropRefraction *= scrollOffset;
	projCoord += dropRefraction;
	projCoord.x = clamp(projCoord.x, 0.0, 1.0);
	projCoord.y = clamp(projCoord.y, 0.0, 1.0);	
	
	//outColor = float4(1,1,1,1) * 1.0 - rainData.x;
	
	outColor = SampleScene(projCoord);
	

	//outColor = float4(1,1,1,1) * scrollOffset;
	
	outColor.a = 1.0;
#endif	
	return outColor;
}