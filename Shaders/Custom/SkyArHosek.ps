#include "EnvBuffer.hlsl"
#include "CameraBuffer.hlsl"

cbuffer MaterialBuffer
{
	//using matrices to avoid alignment issues
	float4x4 StateConfigR;
	float4x4 StateConfigG;
	float4x4 StateConfigB;
	float4 StateRadiances;
};

//from c src file using array, make sure indices line up with matrix access...
//float expM = exp(configuration[4] * gamma);
//float rayM = cos(gamma)*cos(gamma);
//float mieM = (1.0 + cos(gamma)*cos(gamma)) / pow((1.0 + configuration[8]*configuration[8] - 2.0*configuration[8]*cos(gamma)), 1.5);
//float zenith = sqrt(cos(theta));
//
//return (1.0 + configuration[0] * exp(configuration[1] / (cos(theta) + 0.01))) *
//		(configuration[2] + configuration[3] * expM + configuration[5] * rayM + configuration[6] * mieM + configuration[7] * zenith);

//Optimized out most calls to trig functions from source, moved gamma/zenith as inputs since they are reused among the three channels.
float ArHosekSkyModel_GetRadianceInternal(
        in float4x4  					configuration, 
        in float                        cosTheta, 
        in float                        cosGamma,
		in float						gamma,
		in float						zenith
        )
{
	
    float expM = exp(configuration[1][0] * gamma);
    float rayM = cosGamma*cosGamma;
    float mieM = (1.0 + rayM) / pow((1.0 + configuration[2][0]*configuration[2][0] - 2.0*configuration[2][0]*cosGamma), 1.5);

    return (1.0 + configuration[0][0] * exp(configuration[0][1] / (cosTheta + 0.01))) *
            (configuration[0][2] + configuration[0][3] * expM + configuration[1][1] * rayM + configuration[1][2] * mieM + configuration[1][3] * zenith);
}

struct PS_In
{
	float4 clipPos : SV_POSITION;
	float4 direction : DIRECTION;
#if 0
	float2 texCoord : TEXCOORD;
#endif
};

float4 main(PS_In pIn) : SV_TARGET
{
	//NOTE: Is this shader cheap enough to not prefer generating a cubemap texture and avoiding this?
	
#if 0	
	float4 vDir = float4(pIn.texCoord.xy, 0.0, 1.0);
	vDir.xy = vDir.xy * 2.0 - 1.0;
	vDir = mul(vDir, InvProjectionMatrix);
	vDir /= vDir.w;
	vDir = normalize(mul(float4(vDir.xyz, 0.0), InvViewMatrix));
#else
	float4 vDir = normalize(pIn.direction);
	//vDir /= vDir.w;
	//vDir = normalize(vDir);	
#endif	
	
	float VdotS = dot(vDir, SunDirection);
	float cosGamma = max(VdotS, 0.00001);
	float gamma = acos(cosGamma);
	float cosTheta = max(dot(vDir, float4(0, 1, 0, 0)), 0.00001);
    float zenith = sqrt(cosTheta);	

	float4 color;
	color.r = ArHosekSkyModel_GetRadianceInternal(StateConfigR, cosTheta, cosGamma, gamma, zenith) * StateRadiances.r;
	color.g = ArHosekSkyModel_GetRadianceInternal(StateConfigG, cosTheta, cosGamma, gamma, zenith) * StateRadiances.g;
	color.b = ArHosekSkyModel_GetRadianceInternal(StateConfigB, cosTheta, cosGamma, gamma, zenith) * StateRadiances.b;
	color.rgb /= 255.0;	
	color.rgb *= StateRadiances.a; //intensity scale factor
	color.a = zenith;
	return color;
}