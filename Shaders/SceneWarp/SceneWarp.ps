#include "SceneTexture.hlsl"
#include "EnvBuffer.hlsl"
#include "TextureTransformBuffer.hlsl"

Texture2D WarpTexture;
SamplerState WarpSampler;

cbuffer MaterialBuffer
{
	float4 WarpSettings;
};

struct PS_In
{
	float4 clipPos : SV_POSITION;	
	float4 projCoord : PROJCOORD;
	float2 texCoord : TEXCOORD;
};

float4 main(PS_In pIn) : SV_TARGET
{
	float2 projCoord = pIn.projCoord.xy / pIn.projCoord.w;
	projCoord = projCoord * 0.5 + 0.5;
	
	float2 texCoord = pIn.texCoord * 15.0;
	float3 normal0 = WarpTexture.Sample(WarpSampler, texCoord + ELAPSED_TIME * WarpSettings.x).rgb;
	float3 normal1 = WarpTexture.Sample(WarpSampler, float2(-texCoord.y, 1.0f - texCoord.x) + ELAPSED_TIME * WarpSettings.x).rgb;
	float3 normal = (normal0 + normal1) * 0.5;
	normal = normal * 2.0 - 1.0;
	
	float2 warpCoord = normal.rg * WarpSettings.y;
	normal = WarpTexture.Sample(WarpSampler, texCoord + warpCoord + float2(ELAPSED_TIME, -ELAPSED_TIME) * 0.05).rgb;
	//float3 n2 = WarpTexture.Sample(WarpSampler, texCoord + float2(-warpCoord.y, 1.0 - warpCoord.x)).rgb;
	//normal = lerp(normal, n2, 1.0 - (dot(normalize(normal), normalize(n2)) * 0.5 + 0.5));
	warpCoord = (normal.rg * 2.0 - 1.0) * WarpSettings.y;	
	
	projCoord += warpCoord;
	projCoord.x = clamp(projCoord.x, 0.0, 1.0);
	projCoord.y = 1.0 - clamp(projCoord.y, 0.0, 1.0);
	
	float3 baseColor = float3(0.3, 0.7, 0.9);
	float ripple = pow(normal.z, 8.0);
	float4 streakColor = float4(lerp(baseColor, baseColor * 0.5, ripple), 1.0);
	
	float4 sceneCol = lerp(SampleScene(projCoord), streakColor, 0.3);
	
	float4 worldNormal = float4(normal.xzy, 0.0);
	worldNormal = normalize(worldNormal);
	
	float dcol = max(dot(worldNormal, normalize(float4(1.0, -0.5, 1.0, 0.0))), 0.0);
	
	sceneCol = sceneCol ;//* dcol;
	
	return sceneCol;
	
	
}